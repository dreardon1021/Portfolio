{"version":3,"sources":["images/Dan.jpeg","images/resume.pdf","Header/header.js","Footer/Footer.js","Homepage/Homepage.js","Resume/Resume.js","projects-list.js","Projects/Projects.js","ProjectDetail/ProjectDetail.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","Footer","to","target","rel","Homepage","src","headshot","alt","Resume","resume","projectsList","id","name","description","login","userName","password","image","githubLink","deployedLink","workInProgress","Projects","map","project","key","ProjectDetail","props","state","this","undefined","projectList","find","setState","Component","App","path","exact","component","params","match","parseInt","project_id","Boolean","window","location","hostname","router","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a9b7839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dan.96ef646a.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/resume.2b9195ab.pdf\";","import React from 'react'\nimport './Header.css'\n\nconst Header = () => {\n  return (\n    <header>\n      <a className=\"text-decoration-none\" href=\"/\">\n      <div className=\"logo-container\">\n        <div className=\"DR-logo\">\n          <p className=\"logo-D header-logo-text\">D</p>\n          <p className=\"logo-R header-logo-text\">R</p>\n        </div>\n        <div className=\"header-name-title-container\">\n          <p className=\"header-name-title\">Dan Reardon</p>\n          <p className=\"header-name-title\">Software Engineer</p>\n        </div>\n      </div>\n      </a>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react';\nimport './Footer.css'\nimport { NavLink } from 'react-router-dom';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <hr className=\"white-line\" />\n      <div className=\"nav-bar-area\">\n        <nav>\n          <NavLink className=\"nav-bar-item\" to=\"/\">Home</NavLink>\n          <NavLink className=\"nav-bar-item\" to=\"/resume\">Resume</NavLink>\n          <NavLink className=\"nav-bar-item\" to=\"/projects\">Projects</NavLink>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"nav-bar-item\" href=\"https://www.linkedin.com/in/danreardon21/\">Linkedin</a>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"nav-bar-item\" href=\"https://github.com/dreardon1021\">Github</a>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"nav-bar-item\" href=\"https://alumni.turing.io/alumni/dan-reardon\">Alumni Profile</a>\n        </nav>\n        <div className=\"contact-container\">\n          <p className=\"contact-text\">Email: dreardon1021@gmail.com</p>\n          <p className=\"contact-text\">Phone: 973-494-1040</p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport './Homepage.css'\nimport '../App/App.css'\nimport headshot from '../images/Dan.jpeg'\n\nconst Homepage = () => {\n  return (\n    <div className=\"home-content-container\">\n      <p className=\"white-text summary\">Hello! My name is Dan Reardon and I am a Denver based Software Engineer. I have extensive experience leading\n        teams in B2B partnerships and assessing client needs from my past management experience.  I am passionate\n        about creating front-end and user experiences. Currently seeking a Software Engineer/Developer position with a\n        company to produce high-quality solutions for customers, bringing programming experience in Javascript,\n        JavaScript frameworks, and Python utilizing Test-Driven Development.</p>\n      <img className=\"headshot\" src={headshot} alt=\"headshot\"/>\n    </div>\n  )\n}\n\nexport default Homepage","import React from 'react'\nimport './Resume.css'\nimport '../App/App.css'\nimport resume from '../images/resume.pdf'\n\nconst Resume = () => {\n  return(\n    <embed className='resume-img' src={resume} alt=\"resume\"/>\n  )\n}\n\nexport default Resume","const projectsList = [\n  {\n    id: 1,\n    name: 'Vacation Rentals Around Denver',\n    description: 'This was a paired project where Dan Reardon and Ed Stoner created a housing rentals application for the denver area. The main focus point for this project was React. We used React, React Router, JSX, CSS, React-Testing-Library, Jest and Leaflet for this project.',\n    login: true,\n    userName: 'Name: Any name',\n    password: 'Email: Any email',\n    image: '/Portfolio/project-images/VRAD-pic.png',\n    githubLink: 'https://github.com/dreardon1021/vrad',\n    deployedLink: 'https://edlsto.github.io/vrad/',\n    workInProgress: false\n  },\n  {\n    id: 2,\n    name: 'Covents',\n    description: 'COVENTS is an app providing easy access to virtual events happening around the globe in the era of COVID-19. Our goal is to help preserve a sense of togetherness while social distancing through live entertainment. Upon opening the app, the user is able to view upcoming events gathered by a webscraper and compiled into a single API. The user can favorite events as they browse. Favorited events populate in a section of the nav bar on the left so the user has easy access to the event name, date, and a link to the external details page for that event. The user is also able to filter events by clicking a date on the calendar widget or by entering a search term in the search bar. If there are no matching events, an alert will pop up and the page will redirect back to the home display.',\n    login: false,\n    userName: '',\n    password: '',\n    image: '/Portfolio/project-images/Covents-pic.png',\n    githubLink: 'https://github.com/Covents/covents-BE',\n    deployedLink: 'https://covents.netlify.app/#/',\n    workInProgress: true\n  },\n  {\n    id: 3,\n    name: 'Rancid-Tomatillos',\n    description: 'Rancid Tomatillos is an application that allows users to browse movies, log into the server, rate movies, and view additional details about each movie. It is a showcase of our teams ability to work with progressively more complex React component structures. We used redux as a global store to minimize prop drilling and practice data management for large scale applications. We use React Router to navigate between pages and testes all of our synchronous and async functionality.',\n    login: true,\n    userName: 'User Name: marge@turing.io',\n    password: 'Password: password123',\n    image: '/Portfolio/project-images/rancid-tomatillos-pic.png',\n    githubLink: 'https://github.com/dreardon1021/rancid-tomatillos-app',\n    deployedLink: 'https://lmanriq.github.io/rancid-tomatillos-app/',\n    workInProgress: false\n  },\n  {\n    id: 4,\n    name: 'Hearthstone For Beginners',\n    description: 'This is an application that allows the user to create card lists for the computer card game known as Hearthstone. The user can save these card lists and revisit them when they want to. You can also get a detailed breakdown of each card when you view it. The user can view it by clicking view below the card or by clicking the card name in their deck list. To remove cards you navigate to \"View Current Deck\" and click remove. To Add, simply click whereever you see an add button available to you.',\n    login: false,\n    userName: '',\n    password: '',\n    image: '/Portfolio/project-images/hearthstone-4-beginners-pic.png',\n    githubLink: 'https://github.com/dreardon1021/Hearthstone4Beginners',\n    deployedLink: 'https://dreardon1021.github.io/Hearthstone4Beginners/',\n    workInProgress: false\n  }\n]\n\nexport default projectsList","import React from 'react';\nimport './Projects.css'\nimport projectsList from '../projects-list'\nimport { NavLink } from 'react-router-dom';\n\nconst Projects = () => {\n  return (\n    <section className=\"projects-container\">\n      {projectsList.map(project => {\n        return(\n          <article key={project.id} className=\"project-card\">\n            <h2 className=\"white-text\">{project.name}</h2>\n            <img className=\"project-card-image\" src={project.image} alt={project.name} />\n            <NavLink className=\"text-decoration-none project-link\" to={`/projects/${project.id}`}><button className=\"project-card-button\">View</button></NavLink>\n          </article>\n        )\n      })}\n    </section>\n  )\n}\n\nexport default Projects","import React, { Component } from 'react';\nimport projectList from '../projects-list';\nimport './ProjectDetail.css';\nimport '../App/App.css';\n\n\nclass ProjectDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      project: {}\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.project === {} || projectList.find(project => project.id === this.props.id) === undefined) {\n      this.setState({project: this.state.project})\n    } else {\n      let project = projectList.find(project => project.id === this.props.id)\n      this.setState({project: project})\n    }\n  }\n\n  render() {\n    return(\n      <section className=\"project-detail-container\">\n        <h2 className=\"white-text\">{this.state.project.name}</h2>\n        <div className=\"project-img-description-container\">\n          <img className=\"project-detail-image\" src={this.state.project.image} alt={this.state.project.name}></img>\n          <div className=\"project-description-container\">\n            <p className=\"white-text project-detail-description\">{this.state.project.description}</p>\n            {this.state.project.userName !== '' ? (\n              <div className=\"login-info-container\">\n                <p className=\"white-text project-detail-description\">{this.state.project.userName}</p>\n                <p className=\"white-text project-detail-description\">{this.state.project.password}</p>\n              </div>\n            ) : (\n              null\n            )}\n          </div>\n        </div>\n        <div className=\"detail-buttons-container\">\n          <a target=\"_blank\"  rel=\"noopener noreferrer\" href={this.state.project.githubLink} className=\"text-decoration-none details-anchor\"><button className=\"details-nav-button\">Github Repository</button></a>\n          <a target=\"_blank\"  rel=\"noopener noreferrer\" href={this.state.project.deployedLink} className=\"text-decoration-none details-anchor\"><button className=\"details-nav-button\">Deployed Link</button></a>\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default ProjectDetail","import React from 'react';\n\nimport Header from '../Header/header';\nimport Footer from '../Footer/Footer';\nimport Homepage from '../Homepage/Homepage';\nimport Resume from '../Resume/Resume';\nimport Projects from '../Projects/Projects';\nimport ProjectDetail from '../ProjectDetail/ProjectDetail';\n\nimport { Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <body>\n      <Header />\n      <Switch>\n        <Route\n          path=\"/\" exact\n          component={\n            Homepage\n          }\n        />\n        <Route\n          path=\"/resume\" exact\n          component={\n            Resume\n          }\n        />\n        <Route\n          path=\"/projects\" exact\n          component={\n            Projects\n          }\n        />\n        <Route\n          path=\"/projects/:project_id\"\n          component={({ match }) => {\n            const { params } = match;\n            return (<ProjectDetail\n              id={parseInt(params.project_id)}\n            />)\n          }}\n        />\n      </Switch>\n      <Footer />\n    </body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = <BrowserRouter basename=\"/Portfolio\"><App></App></BrowserRouter>\n\nReactDOM.render(\n  <React.StrictMode>\n    {router}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}